using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ItemDetails
{
	[RealtimeProperty(1, true, false)] 
    private string _name = "w";
	
    [RealtimeProperty(2, true, false)] 
    private Vector3 _scale = new Vector3(1.0f,1.0f,1.0f);
	
	[RealtimeProperty(3, true, false)] 
    private double _price = -1.0;
	
	[RealtimeProperty(4, true, false)] 
    private double _rating = -1.0;
	
	[RealtimeProperty(5, true, false)] 
    private string _pname = "0";
	
	[RealtimeProperty(6, true, false)] 
    private bool _visible = true;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ItemDetails : RealtimeModel {
    public string name {
        get {
            return _nameProperty.value;
        }
        set {
            if (_nameProperty.value == value) return;
            _nameProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public UnityEngine.Vector3 scale {
        get {
            return _scaleProperty.value;
        }
        set {
            if (_scaleProperty.value == value) return;
            _scaleProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public double price {
        get {
            return _priceProperty.value;
        }
        set {
            if (_priceProperty.value == value) return;
            _priceProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public double rating {
        get {
            return _ratingProperty.value;
        }
        set {
            if (_ratingProperty.value == value) return;
            _ratingProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public string pname {
        get {
            return _pnameProperty.value;
        }
        set {
            if (_pnameProperty.value == value) return;
            _pnameProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public bool visible {
        get {
            return _visibleProperty.value;
        }
        set {
            if (_visibleProperty.value == value) return;
            _visibleProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public enum PropertyID : uint {
        Name = 1,
        Scale = 2,
        Price = 3,
        Rating = 4,
        Pname = 5,
        Visible = 6,
    }
    
    #region Properties
    
    private ReliableProperty<string> _nameProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _scaleProperty;
    
    private ReliableProperty<double> _priceProperty;
    
    private ReliableProperty<double> _ratingProperty;
    
    private ReliableProperty<string> _pnameProperty;
    
    private ReliableProperty<bool> _visibleProperty;
    
    #endregion
    
    public ItemDetails() : base(null) {
        _nameProperty = new ReliableProperty<string>(1, _name);
        _scaleProperty = new ReliableProperty<UnityEngine.Vector3>(2, _scale);
        _priceProperty = new ReliableProperty<double>(3, _price);
        _ratingProperty = new ReliableProperty<double>(4, _rating);
        _pnameProperty = new ReliableProperty<string>(5, _pname);
        _visibleProperty = new ReliableProperty<bool>(6, _visible);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _nameProperty.UnsubscribeCallback();
        _scaleProperty.UnsubscribeCallback();
        _priceProperty.UnsubscribeCallback();
        _ratingProperty.UnsubscribeCallback();
        _pnameProperty.UnsubscribeCallback();
        _visibleProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _nameProperty.WriteLength(context);
        length += _scaleProperty.WriteLength(context);
        length += _priceProperty.WriteLength(context);
        length += _ratingProperty.WriteLength(context);
        length += _pnameProperty.WriteLength(context);
        length += _visibleProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _nameProperty.Write(stream, context);
        writes |= _scaleProperty.Write(stream, context);
        writes |= _priceProperty.Write(stream, context);
        writes |= _ratingProperty.Write(stream, context);
        writes |= _pnameProperty.Write(stream, context);
        writes |= _visibleProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Name: {
                    changed = _nameProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Scale: {
                    changed = _scaleProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Price: {
                    changed = _priceProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Rating: {
                    changed = _ratingProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Pname: {
                    changed = _pnameProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Visible: {
                    changed = _visibleProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _name = name;
        _scale = scale;
        _price = price;
        _rating = rating;
        _pname = pname;
        _visible = visible;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
